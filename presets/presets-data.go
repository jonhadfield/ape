// Code generated by go-bindata.
// sources:
// presets-files/aws/playbook.yml
// presets-files/aws/policies.yml
// presets-files/cis-foundations/playbook.yml
// presets-files/cis-foundations/policies.yml
// DO NOT EDIT!

package presets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _presetsFilesAwsPlaybookYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x41\x6f\xd3\x40\x10\x85\xef\xf9\x15\x4f\xb9\xbb\x1c\x2a\x2e\xb9\x25\x21\x41\x88\x44\x58\x5e\x2a\xb8\x2e\xeb\x21\x5d\xd5\xde\xb1\x66\x66\x29\xe6\xd7\x23\xd7\x34\xb4\x39\x20\x9b\xf8\xb4\xb6\xfc\x7d\xa3\xdd\xf7\xb6\x28\x8a\x45\xc7\x4d\x0c\x91\x74\x85\x9b\x37\xcf\xeb\x9b\xbe\x6d\x16\x8b\xae\xf1\xbd\xae\x16\x00\x0a\x24\xdf\xd2\x0a\xcb\xdd\xc6\xa1\xcb\xdf\x9a\x18\xa0\xc9\x77\x7a\xcf\xa6\xcb\xe1\x0f\xe0\xec\x19\x5f\x07\x68\xb9\x7c\x05\xaf\x5b\xff\x8b\x13\xaa\x77\x0e\xe5\xe8\x70\xd7\x38\x1c\x85\x2c\xd1\x7a\xbc\x17\xce\x1d\xd6\x21\x90\x2a\xaa\xa8\x0f\xb3\x6d\x9c\x8d\xf0\xf6\x16\xc7\xaf\xa8\x48\x39\x4b\x20\x54\x14\x58\x6a\x38\x32\x85\x4f\xc3\x22\xd5\x24\x28\x07\x69\x8f\xbd\xf8\x96\x1e\x59\x66\xcf\x72\xb7\xd8\xe4\xf0\x40\x86\x92\xa4\x8d\xaa\x91\xd3\x8c\xed\x7f\x71\xd8\x36\x9c\xeb\xcf\xe2\x63\x83\x03\x9f\x4e\x31\x9d\x26\xe3\x4f\xe8\x5e\x38\x19\xb6\x59\x8d\x5b\x38\x77\xc0\x96\xc4\xe2\xf7\x18\xbc\x91\x22\x26\xd8\x3d\xe1\xc3\xfa\xf8\xf2\x3b\x9c\xb1\xd0\xff\xcc\xb9\x18\x00\x1e\xfd\x9f\x24\x9e\x62\x82\x23\xf9\x41\x32\xd9\xbb\x3b\x6c\x70\x88\x6a\x94\x48\xce\xf9\xcf\xa2\x5f\x97\x66\xfa\xc1\xef\x7e\x76\xac\x54\x3f\xb7\xec\x23\xf5\xd3\xd9\xe1\x2c\xff\x72\xa8\xd8\xbc\x45\x4e\xb3\xf8\xd2\xab\x3e\x0e\x7d\x1c\xfb\x37\x8b\xbd\xd3\xe9\xc9\x5d\x75\xc1\x8f\xfb\x35\x9e\xae\x13\xdb\xb0\x61\xce\xc9\x26\xb3\x17\xc1\xa0\x80\xeb\x28\x0c\xad\x41\xc9\x62\x8a\xbb\x24\xa4\x26\x31\x18\xd5\x57\x58\x5f\x6a\xfe\xa4\xf2\x4f\xdb\xf9\xf9\x1d\x00\x00\xff\xff\x04\x3a\xce\x80\x2c\x05\x00\x00")

func presetsFilesAwsPlaybookYmlBytes() ([]byte, error) {
	return bindataRead(
		_presetsFilesAwsPlaybookYml,
		"presets-files/aws/playbook.yml",
	)
}

func presetsFilesAwsPlaybookYml() (*asset, error) {
	bytes, err := presetsFilesAwsPlaybookYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "presets-files/aws/playbook.yml", size: 1324, mode: os.FileMode(420), modTime: time.Unix(1517860342, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _presetsFilesAwsPoliciesYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func presetsFilesAwsPoliciesYmlBytes() ([]byte, error) {
	return bindataRead(
		_presetsFilesAwsPoliciesYml,
		"presets-files/aws/policies.yml",
	)
}

func presetsFilesAwsPoliciesYml() (*asset, error) {
	bytes, err := presetsFilesAwsPoliciesYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "presets-files/aws/policies.yml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1517859511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _presetsFilesCisFoundationsPlaybookYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x4d\x6f\xdb\x48\x0c\xbd\xe7\x57\x10\x3e\xb5\x05\x92\xc6\x71\x77\xb7\xc9\xcd\xf0\xa2\x40\xd0\xb8\x08\x90\xa2\xbd\xf4\x42\x8f\x28\x69\x90\xd1\x8c\x76\x3e\xe2\x6a\x7f\xfd\x82\x23\xc5\x5f\x1d\x2b\xd3\x24\x58\x14\x28\x62\x79\xc4\xc7\x21\x1f\x1f\x49\x9f\x9e\x9e\x9e\xb4\x46\x49\x21\xc9\x5d\xc1\xd9\xfb\xc7\xbf\xcf\xba\x46\x9d\x9c\xb4\x0a\x3b\x77\x75\x02\x00\xa7\xa0\xb1\xa1\x2b\x98\x2c\xae\xef\x60\x7a\x36\x9d\xf0\x43\x80\xcd\xab\xfd\x47\x3e\x37\xb1\x24\x48\x7b\xb0\xc6\x78\x68\xd1\xb9\xb5\xb1\x05\x04\x87\x15\x4d\x8e\x9c\x42\x21\xc8\x39\xb8\xa7\x6e\xe7\xdc\x01\xe2\xc5\x08\x62\x70\x64\x1d\xac\xa5\xaf\xb7\x80\xa8\x8b\xf8\xc4\x04\x0f\xcb\x4f\xf3\x94\xc9\xd9\x6f\x9a\xd4\xc6\x43\x70\x54\x80\xd4\x70\x79\x0e\x05\x76\x6e\x92\x7e\x05\x85\x97\x0f\xb4\x7b\xaf\x63\xef\x1e\xb8\xf4\x61\xc4\x25\xd2\x2e\xd8\x5d\xa3\x0e\xd0\x12\x58\xe3\xd1\x53\x01\xf4\x40\xb6\x1b\xb3\xfd\xc7\xd3\xb6\xaf\xe7\xcb\xed\x75\xe3\xb9\x0e\x2c\xfd\x13\xa4\x25\x07\xe8\x41\x11\x3a\x0f\x46\x13\x84\xb6\x25\x2b\xd0\x11\x28\xf2\x9e\x6c\x0a\xf0\xcf\x17\x01\xee\xe3\x29\xb3\x7e\x12\xef\xaf\x57\xc4\x73\x5d\xb3\x32\x2a\x85\xf2\xf1\x15\x51\x74\x68\x56\xe9\xbb\x5c\xbe\x30\x59\x8d\xd4\xb2\x09\x0d\x28\xd2\x95\xaf\xc1\x94\x30\xfd\x00\xc6\x42\x65\x09\x8f\x84\x6f\x7a\xfe\x3c\xcc\xd6\xd2\x03\x69\xef\xb6\x5f\x58\x0a\x2e\x59\xc4\xd3\x31\xdd\x18\x81\xa0\x9f\x6d\xbc\xd5\xe3\xf3\xbe\xcc\xb6\xa5\xc4\x37\x53\xe4\x92\xb4\x9f\x8e\x29\xc7\x80\xa9\xcd\x46\x88\x4c\xd0\x7b\x82\x44\x3f\xa5\xf3\x69\xc3\x63\xfa\x31\x18\x5e\x7e\x9a\x83\x74\x40\x1a\x57\x8a\x0a\x28\x8d\x05\x5f\xd3\x1e\x58\xd2\x74\x86\x0e\xd4\x68\x8b\x35\xbe\x00\x23\xb7\x3c\x87\xaf\xa3\xd8\xa0\xf7\x28\x6a\x2a\xc0\x68\xd5\x81\x37\x50\x59\x13\xda\x18\x7f\x6b\x14\x39\x78\x73\xad\x95\xd4\xf4\xf6\x7f\x44\x9c\x0f\x27\xd2\x98\x99\xe5\xba\x44\xe7\xa9\x37\xc9\xc1\xec\x05\xfc\x65\x06\x35\x56\x59\x16\x2f\x32\x08\x8a\xe0\x42\xdb\x1a\xeb\x7b\x7b\x35\x3a\x58\x11\x69\x10\xb1\x9c\x0b\x8e\x4b\x13\x01\x41\x6a\x21\x8b\x58\x8e\xb1\x13\xcd\xbf\xdf\xc1\x5d\xff\x6a\x12\x7b\x8c\xc3\x7f\x9b\xd8\xb6\x1c\xf9\xd0\xee\xb5\x9d\x22\x58\xa9\x2b\x90\x5a\x7a\x89\x8a\xfb\x9a\x1d\x4e\x31\xf9\x50\xa9\x18\x81\xbe\x1f\xfa\x1a\x3d\xd4\xc8\xdd\x10\x84\xd1\x8e\xdd\x7f\x2c\xe3\xa4\x47\x19\xd4\xdf\x23\x49\x04\x40\xa5\xcc\x1a\xca\xa0\x14\xfc\x98\xbc\xbb\x7a\xf7\x63\x02\x58\xb0\x06\x3a\x6f\x31\xf6\xe2\xd6\xca\x07\xa9\xa8\x1a\x68\xc5\x17\x1b\x82\xf7\xab\x17\x17\xa3\xf3\xcd\xe0\xc4\x42\x99\x50\x7c\xb5\x28\xd5\x6e\xf5\x49\x1d\xef\x6f\xa9\x92\x46\x27\x64\xe3\x62\x74\x90\xf9\xd5\xb4\x32\x15\x94\x52\x11\x3c\xa0\x92\x05\x7a\x69\xf4\x0e\x5c\xca\x7e\x86\x2a\xb1\x3c\xdc\xcd\x60\x15\xc4\x3d\xf9\x03\x34\xc7\x5c\x92\x2e\x06\xa8\x0d\x2b\x25\x85\xea\x86\xe4\xcb\x95\x4a\x10\xf8\x22\x67\x68\xd9\xc1\xf0\xfc\x7f\x9f\x04\xa9\x3d\x55\x36\x12\x38\x92\x35\x9e\xfa\x8e\x5e\xd4\x70\x63\xaa\x64\xf4\x32\x86\x18\xa6\xfc\xc2\xe8\x52\x56\xc7\x13\x03\x6f\xfa\x0f\xce\x04\x2b\x08\xbe\x76\x2d\xb9\xb7\x93\xe7\xda\xaa\x94\x59\xe1\x8e\x39\xff\x32\x73\x6e\x93\x9a\x82\x4a\xa9\x1f\x95\xed\x59\xa6\x34\xe7\xb3\x95\x62\xdf\xd4\x41\x50\x33\x74\x79\x4b\x97\x41\x08\x94\xa9\xaa\x28\x02\x5b\x70\xa3\x23\xb3\x76\x72\xbd\x79\x2b\x85\x9a\x31\xae\x1d\x52\x93\x49\x43\x5a\xd8\xae\x65\xce\xa0\xe7\x90\xf3\x5c\xcd\x8e\x7c\x5e\xde\xc1\x62\xf9\x39\xc9\x9a\x0c\xcd\x8e\x63\x34\x57\x17\x4b\x98\x08\xce\x9b\x86\xec\x46\x5f\xd9\xf0\x68\xdd\xcd\x72\x24\x03\x63\x39\x37\xe4\xad\x14\x5c\xd5\xdc\x71\x78\x4f\x41\x85\xb6\xe9\x27\x8d\x08\x1f\x34\x06\x5f\x1b\x2b\xff\xa5\x02\xe6\xb7\xd7\x20\x50\xa9\xc4\xc5\x66\x39\x62\x92\x0b\xda\x37\xac\x86\x97\xb2\xc5\xa0\xd3\x4e\x56\xfa\x54\xea\xf1\x3d\x6a\x96\xa3\x38\xd9\x37\xe7\xf5\x8f\xa7\xd5\xf1\xe9\x65\x96\xb5\x28\x65\x62\x6e\xba\x49\x07\xa2\x46\x5d\x51\x32\xd2\x19\xc2\x93\x0b\xb8\xc3\x6a\x11\x2b\x38\xd8\x9e\x7a\x23\xf0\x19\x25\x9a\x0b\xcf\xca\x91\x48\x36\x53\x8e\xb4\x97\x62\x28\x03\x94\x2a\xd8\xb4\x33\x19\x95\x9b\xeb\x4c\x21\x1d\xae\x14\xd7\xaf\xb1\xe0\x78\x8c\x0b\x2c\x25\x05\x29\x8a\x6e\x98\x32\x5d\x8c\x29\xb7\x32\xaa\x3c\xd7\xad\xad\xdc\x3d\xcd\x8c\x8c\x55\xed\x77\x52\x33\x88\x7a\x36\x33\x72\xd6\xb6\x5c\x7c\x47\x22\x58\xe9\xbb\x7e\xc8\x1e\x45\x7d\x45\xb9\x1b\x60\x78\xf0\xf8\x42\x7e\x6d\xec\x3d\xcc\xfb\x26\xb3\x30\xda\x5b\xa3\xe0\x86\x77\x30\x78\xf3\x65\xbe\xb8\x49\x34\xb0\x59\xd6\x8e\xf7\x0c\x6f\xf4\xe0\x4d\x85\x9e\xd6\xc9\x5f\x55\x66\x59\x5b\x60\x2e\xb4\x35\xc1\x13\x78\x6e\x31\xa3\xb1\x7f\x45\xf1\xfb\x76\xbb\x38\x0e\xf5\x21\xa7\xa9\x69\x73\x40\x1b\x37\x4c\xe3\x52\x57\x96\x93\x58\x5a\xd3\xc0\xf9\x59\xfc\xf7\xfe\x9c\xe3\x1a\x17\x99\x61\xed\x39\x00\xcc\x5b\xd6\x9f\x05\x38\x9b\x7d\xbc\x4c\x41\x1e\x4b\xe0\x16\x91\x83\x54\x32\x42\x62\xe8\x19\x26\xae\x6f\xb7\x8b\x64\x00\x33\x52\xc5\x33\x53\x41\x25\x06\xe5\x0f\x0b\xd0\x94\xc3\xcf\x7a\xec\x01\xcf\x3a\x56\x0a\x1f\xaf\xcb\x63\x74\x59\x4a\x31\x39\xf9\x2f\x00\x00\xff\xff\xdc\x5b\xf7\xe1\xc2\x15\x00\x00")

func presetsFilesCisFoundationsPlaybookYmlBytes() ([]byte, error) {
	return bindataRead(
		_presetsFilesCisFoundationsPlaybookYml,
		"presets-files/cis-foundations/playbook.yml",
	)
}

func presetsFilesCisFoundationsPlaybookYml() (*asset, error) {
	bytes, err := presetsFilesCisFoundationsPlaybookYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "presets-files/cis-foundations/playbook.yml", size: 5570, mode: os.FileMode(420), modTime: time.Unix(1517163086, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _presetsFilesCisFoundationsPoliciesYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x5d\x6f\xdb\x3a\xd2\xbe\xef\xaf\x18\xf8\xaa\x6f\x81\xbc\xa7\x6d\xce\xc5\xd6\xd8\xb3\x80\xd6\x69\x9a\x20\x76\x6a\xd8\xf9\xb8\x39\x37\x34\x35\x92\x88\x50\xa4\x97\x43\xc6\xc7\xfb\xeb\x17\x24\xe5\x8f\xd8\x4a\x2c\x3b\x56\xd2\xc5\xb6\x37\xad\x25\x72\x9e\x67\x66\x38\xf3\x8c\xa4\x93\x93\x93\x0f\x53\x2d\x05\x17\x48\xdd\x0f\x00\x27\xa0\x58\x89\x5d\xe8\x18\xe4\xa8\x2c\x18\xad\x2d\x4c\x19\xd1\x4c\x9b\x14\x1c\xb1\x1c\xa1\xf3\x01\x00\x80\xf0\x11\x8d\xb0\xf3\x2e\x74\xa4\x9e\xc5\xdf\x0c\x92\x76\x86\x63\x17\x04\x2b\xbb\xb7\x84\x26\xfc\x9c\x09\x69\xd1\x84\xfd\xfd\x9f\x13\xe0\x46\x58\x34\x42\xab\x2e\xf8\x9b\xae\x59\x89\xd5\x35\x00\xae\xcb\x29\x33\x82\xfc\xc5\xce\x1f\x7f\x74\x96\x17\x1e\x99\x74\x01\x99\xd6\xb6\x53\xb7\xd5\xb0\x82\xd9\x67\x64\x6f\x09\xd3\xfa\x2d\xff\xbe\xda\xd1\x29\x61\xbb\x90\xb2\x39\x6d\x1a\x39\xfd\xfc\xe1\x39\x67\x30\xce\x91\x08\x1e\x70\x1e\xdd\xb1\xe5\x8d\x12\x53\xe1\xca\x5f\xc1\x21\x09\xb7\xe2\x11\x93\x00\xf8\x0a\xe7\x74\x04\xc7\x7c\x7b\xea\x18\x47\x68\x08\x66\xc2\x16\xab\x24\x61\x2a\x0d\xbf\x68\x67\x61\x70\x9e\x6c\xf9\xc7\x03\x14\x9c\xc9\x83\x3d\x74\xc1\x68\x70\x9e\x9c\xe1\xa3\xe0\xb8\xe5\x8c\x8c\x49\xc2\x5a\x6f\x5c\x30\x5a\x64\xc8\xd6\x2a\x6b\x1c\x76\x76\x32\x53\xda\x82\x23\x4c\x41\x28\xf8\xf6\x39\xf8\x67\x8b\x5d\x21\xf2\xe2\x35\xcc\x76\x40\x3c\x38\xed\xff\xf1\xba\xe8\xb2\x90\x4a\xeb\xc9\xdf\xc4\x19\xaf\x3c\x0a\xfb\xe5\xef\x21\x0c\x51\x91\x33\xeb\xb4\x08\x98\x41\x30\xda\x32\x8b\x29\x78\x26\xf3\xb7\x64\x37\x8a\x86\x8f\x4e\xf0\x32\x19\xac\xd2\x38\xd4\xfb\x39\x18\xfc\x97\x13\x06\x09\x98\x05\x89\x8c\x2c\x68\x85\xe0\xa6\x53\x34\x9c\x11\x82\x44\x6b\xd1\x34\x4e\xf0\x45\x1a\x0e\xc3\xee\x3b\xd9\x8f\xa2\xf5\xc4\xf6\xbd\xe9\x9f\x0a\x6f\xbd\xe1\x1e\x23\xec\x07\xbb\xcf\x1d\xec\xfd\xc8\x3d\xe5\x26\xf5\xec\x65\x6e\xcf\x47\xf4\xb5\xec\xfa\xde\x74\xbb\xec\x68\x5e\x4e\xb4\x7c\x43\x4e\xd7\x5a\x25\x72\x5a\x30\xe5\x4a\x34\x82\xf7\x0a\x66\x18\x6f\x89\x9c\x72\xe5\xe4\x4d\x03\x76\x1d\x0c\x1e\x87\x0a\x41\x29\x94\x28\x5d\x09\x12\x55\x6e\x0b\xd0\x19\x7c\xf9\x1d\xb4\x81\xdc\x20\x6b\x35\x11\x07\xd1\xf0\xb2\x47\x04\xfb\x3b\xfb\x7f\xc5\xf6\xcb\xef\x4d\x89\x4e\x0d\x3e\xa2\xb2\xb4\xba\x60\xd0\xd1\x3e\xda\x68\x4f\x5e\x31\x3c\x3f\xb3\xc5\x32\xba\xd1\x23\x2c\xf1\x49\xcc\x8e\xc6\x0e\xff\x9a\x86\x28\x2e\x7e\x8f\x3d\x71\xd5\xf7\x7c\x24\x25\x52\x73\x31\xb0\x27\xd9\xc5\xed\xdf\x3d\x0e\x66\x85\x56\x43\x7f\x65\x77\x9b\x78\xb1\x27\x28\xbd\x14\xb4\xda\xa9\x27\xc2\x16\xff\x12\x64\x8f\xac\x6d\x8e\xa8\x6b\x2f\x18\x6d\x34\xcf\x06\x82\xae\x62\x3d\x38\x4f\x40\x10\xa0\x62\x13\x89\x29\x64\xda\x80\x2d\xf0\x89\x27\x8e\xaf\x58\x8f\xcb\x7d\xa7\xf8\xad\xa1\x5d\x30\x93\xce\xd8\x81\xfc\x7f\x91\xf9\xee\x82\xd1\x45\x45\xe3\x10\x17\x84\x93\x5d\x8d\xba\x41\xe5\x31\x6b\x19\x2f\x30\x05\xad\xe4\x1c\xac\x86\xdc\x68\x37\x0d\xa7\xd9\x68\x89\x04\x1f\x2f\x95\x14\x0a\xff\xef\xd8\xca\xef\x82\x51\xdc\x79\x58\xc1\x69\x9e\xbe\x07\x90\x48\xaa\x3b\xda\xa0\x31\x60\x8a\xe5\x98\x1e\xc6\x63\xc0\xc8\x62\x84\xe9\x53\x32\x8e\x18\x7b\x80\x1c\x69\x19\xe3\x5f\xea\x54\x64\x73\x83\xe4\xa4\xed\x82\x6f\x45\x86\x70\x77\xcb\xd7\x12\x9f\xcf\x4c\xae\x95\x65\x42\xd1\x76\x7e\x46\xd8\x2f\xb0\xf2\x2e\xf9\x6f\xa4\x15\x70\xd7\xf2\x62\x40\x6e\x3a\xd5\xc6\x46\x56\x05\x23\x98\x20\x2a\xe0\x41\xbe\xa4\x3e\xed\xca\xb0\x1c\x84\xe2\x22\x0d\x4a\x20\x8c\x8d\xc9\xfd\x18\xc6\x71\x69\xd3\xaa\xf2\x4a\xfa\x1b\x49\x39\x5f\x64\x7f\xbd\x3b\x84\xda\x70\xc4\x72\xd3\xb8\x71\x87\x19\xd5\x65\x33\xea\x7a\x64\xe1\x1f\x51\x12\xfc\x96\xdc\x8f\x2b\x5e\xb1\x07\x3d\x75\xdb\x99\x0e\xe3\x31\xa1\x75\xd3\x27\xc3\x65\xea\x8c\x50\x39\x08\x25\xac\x60\xd2\xcf\xcf\xa6\xba\xcb\x17\x62\x26\x65\x48\xa1\x38\x77\xdb\x82\x59\x28\x98\x9f\xba\x81\x6b\x45\xde\xf3\x0b\x05\x72\xd4\x12\xbd\xdd\x4e\x7b\x31\xae\xf7\xc2\x16\xcb\x1d\xb6\x8f\x75\xfd\x56\xb7\xca\x11\xa6\xcd\xfa\x73\xfd\x0e\x7b\x3c\xa5\xa9\xab\x8a\xc1\x6f\x4c\x4a\x3d\x83\xcc\x49\x09\x7f\x76\x3e\x75\x3f\xfd\xd9\x01\x96\x7a\x15\x4e\xd6\x2b\xa8\x47\x84\xa9\x11\x8f\x42\x62\x5e\xd5\x51\x1f\xaf\x2a\x9d\x9b\xcb\xb8\x66\xf2\xad\x73\x87\x86\x84\xde\x4c\x35\x9f\x27\x98\x31\x27\xeb\xbb\x5d\xe7\x7b\x96\x21\xb7\xdb\x8b\x12\xb9\x0c\xf6\xe6\x92\x51\x05\x6f\x7b\xd1\xa7\xfa\x05\x3e\x4c\x75\xc0\x3e\xd5\xba\xb9\x27\xb5\x4b\x6f\x0c\x13\x72\x5d\x42\x08\x15\x12\xd7\x60\x2e\xb4\x6a\x26\x1a\xb9\xdf\xc8\xfa\x8d\xba\x61\xbb\xdd\x2e\xbc\xa4\x81\x93\x56\x8c\x82\x91\xb0\x66\x1b\xf4\xf3\xad\x7f\x0d\xb8\xd4\xb9\xb7\x84\x7e\x95\x48\x83\x98\x5e\x23\xd3\xb0\x4c\xef\x8f\xbf\xaf\xf3\x73\x21\xf1\x6e\x69\xf4\xfb\xba\xc1\x66\x2c\xbc\x4e\x1b\x9f\xc2\xc4\xf1\x07\xb4\x1b\x9c\xc8\xd7\x60\x41\x21\x8d\xa7\x6e\x22\x05\x97\xf3\xaa\xf2\x88\x89\xdc\x6e\x3f\xc7\x89\xca\x3f\x03\x94\x61\x65\x2f\xd9\x30\xd7\xe8\xe8\xae\xd1\x08\xa6\xe3\x69\x14\xca\x62\x6e\x42\x6f\x09\x7d\x24\xdc\x75\xcf\x2c\x2f\xa0\xaf\xf3\xb6\x92\xac\xcf\x2c\x92\x5d\xd9\xf2\xa6\xce\x50\x8a\x47\x34\xf3\x1b\x51\xae\xd1\xda\x31\x70\x7d\x59\xfe\xb0\xf6\xa0\xae\x86\xbc\x6f\x8f\x3d\xad\x32\x91\x3f\x7f\xa0\xe0\x63\xfc\x4f\xa4\x05\x37\xf3\x29\xd2\xb6\x94\xab\x75\x40\xd8\xb9\x3b\x42\xae\x4d\xda\xa0\x0f\xf8\xca\x52\x35\x35\x4c\x17\xa5\x24\xd8\xdb\x27\x4b\x9b\x71\xca\xa5\x9e\xb0\x35\x5a\xb6\x45\x5a\x97\x8a\x4b\x97\xe2\x8f\x60\xb2\x65\x5e\xb4\x3c\x9f\x29\x66\x42\xd5\xa9\xee\xa3\x70\x5a\xa4\x65\xaf\x60\x4a\xa1\x1c\x9f\xc6\xa3\xe8\x85\xdf\x59\x34\xdc\x02\x37\xe5\xab\xcc\x54\xf0\x37\xe6\xa6\xe8\xc6\x5b\x4d\x46\xd7\x07\x50\x5b\x15\xcc\x4a\x87\x49\x9d\xe7\x41\x83\xad\x88\x6a\x15\x6a\xeb\x5a\x29\x5a\xae\x6a\xb5\x70\xf6\x23\x94\x03\x5a\xc1\x66\xf1\xf7\x35\x13\x15\x37\xf3\xa9\x2f\x99\xcc\x7a\x70\x16\x1c\x79\xa2\x57\x83\x31\xf4\x06\x57\x4d\xdf\x5f\x1c\xd4\xdb\xe8\xfb\xc2\xf8\x3e\x2c\xc2\x6b\x16\xdf\x80\xbd\xf8\xe5\x8e\xac\x2e\xd1\x2c\x87\x0a\x8f\x79\xff\xd6\xfc\x50\x52\x77\x21\x38\x5f\x44\x7d\x85\xf3\x51\x65\x7f\x57\x00\xea\x96\xf7\x2a\xb8\xd5\xb0\xb1\x47\xc7\x53\x1a\x08\xb9\xf3\x2c\x16\xc3\x7a\x54\xab\x42\xe5\xc6\x67\x68\x66\x74\x09\x9f\xff\x3f\xfc\xfd\xed\xb3\x6f\xec\x61\xf4\xfa\xfa\xb5\x51\x32\x22\xff\xda\x1d\x57\xfb\xff\xf0\xdb\x37\x29\x90\xc1\xf0\xd0\x68\xab\xb9\x96\xcf\xb4\xb9\x00\xb2\xa6\x64\xde\xf4\x86\xf5\x2e\x5a\x6c\xbb\x1c\xfe\x1a\x6f\xb9\xa0\xfa\xcc\x8e\x97\xc3\x3d\xf7\x5b\x3a\xf3\xa8\x01\x39\x3d\xfd\xdb\xb7\xff\x99\x90\xac\xc8\xbe\x4d\x50\xee\x86\x3d\xc8\x7c\x10\x6a\xea\x75\xd5\x98\xee\x86\xbd\xa6\x45\xcd\x47\xe0\x6e\xca\x77\xfb\xfd\x82\x51\x55\x0d\xce\xa5\x9e\xf5\x75\xbe\xaf\x40\x4f\xe3\x48\xb7\x91\x51\xa0\xb3\xea\x65\xb2\xe7\xe5\x8b\xb3\x11\xdc\x86\x3c\xf3\xb2\x37\xcb\x04\xdf\x83\xc9\x9e\xb9\x14\x6e\xf3\xca\xe0\x99\x00\xd5\x3d\x84\x4d\x5f\x9a\x4c\x2f\x18\x25\x6a\x3e\x72\xb2\x4e\x41\x6d\xd7\x3d\x5e\x20\x7f\x08\x35\x3e\xf6\xd4\xc5\x67\x15\x61\x6c\xa8\xda\x72\xe3\x67\xee\x74\xda\x8d\xcd\xb3\x91\x9c\xd5\x33\x8a\xd3\x49\xb2\x66\xe5\x65\xb4\xcb\x47\x5e\x7e\x52\x2c\xd1\x07\xaa\x32\x13\xbe\x6c\x61\x92\x99\x32\xbe\x20\x09\x94\x9c\x62\xce\x16\xda\x88\x7f\x63\x0a\xc9\xf0\x12\x38\x93\xb2\xbd\x5e\xeb\x5d\xef\x11\xdc\x0b\x5b\x8c\xdd\x84\xb8\x11\x13\x34\xe7\xda\xdc\xae\xe1\x48\x86\x97\xbd\x15\x8a\x66\xb9\xdb\x94\x6f\xec\x77\x25\x2a\xeb\x15\x63\x78\x28\x45\x22\x57\x27\x42\xbd\xf8\xd1\x4f\xeb\xfc\x2b\x30\x63\x91\xab\x4b\x45\xf7\x11\xca\x12\xc9\x71\x7d\x10\x3f\x83\xd3\xd9\xcb\x6f\x4d\x5a\xa7\x3c\xd2\xda\x26\xd1\xf8\xed\xea\x4b\xb4\xe3\x52\x5d\x3e\x59\x9b\x03\x2f\x98\xca\xf1\x1d\x52\xfb\x32\x19\xc4\x27\x6d\xbd\x75\x04\xc7\xe5\xb9\x26\xa8\xe3\xbc\xe2\xe2\x8b\xd6\xf7\x63\xbd\x42\x14\x27\xb3\x16\xc9\xfb\xf1\xaf\xe6\x5c\xfb\x82\x82\xca\x57\xe1\x28\xd2\x99\x90\xce\xbc\x87\x2b\x92\xfb\x71\x85\x29\x71\xb6\x38\x7f\x82\xe3\xb8\x9e\x48\x05\xb1\x89\xf4\x72\x43\x1b\x20\x5e\x60\xea\xbc\xe0\x48\x51\x62\xf0\x81\xce\xea\xe7\x94\xb7\xf7\xc9\xd9\x02\xe9\x4f\x33\x5e\xe0\x3c\xab\x60\xfe\xcc\x7a\x83\xab\x36\xdc\xb3\x1a\xa6\xdf\xbb\x26\x2c\x1e\x78\xb4\x5e\x18\xd6\x1e\x8d\xfc\x2a\x85\xa1\xed\x72\xb0\x21\x5d\xdf\x2f\xc6\xc8\x83\x74\x6d\x91\x6a\xc5\xcd\x8f\x74\xd7\x68\x67\xda\x3c\x40\x54\x8a\x3e\xe6\xd6\x68\x09\x7d\x41\x96\xe0\xe3\x75\xd2\xeb\x37\x7d\x81\x7e\x44\x17\x78\xb3\x6f\x43\x5f\x55\xf4\x73\x66\x71\xd6\xfc\x6b\xd7\x63\x72\x8d\x08\x7e\x44\x00\x2d\xb2\x36\xda\x59\x04\xeb\xa7\xbc\xf7\x4b\xee\x91\x07\x71\xe3\x31\xb4\xc8\xd4\x0f\x9b\xef\xc6\xf0\x6e\xd8\xdb\x45\xed\x3f\x01\x00\x00\xff\xff\x5b\xd4\xcd\x32\x7e\x32\x00\x00")

func presetsFilesCisFoundationsPoliciesYmlBytes() ([]byte, error) {
	return bindataRead(
		_presetsFilesCisFoundationsPoliciesYml,
		"presets-files/cis-foundations/policies.yml",
	)
}

func presetsFilesCisFoundationsPoliciesYml() (*asset, error) {
	bytes, err := presetsFilesCisFoundationsPoliciesYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "presets-files/cis-foundations/policies.yml", size: 12926, mode: os.FileMode(420), modTime: time.Unix(1518035221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"presets-files/aws/playbook.yml": presetsFilesAwsPlaybookYml,
	"presets-files/aws/policies.yml": presetsFilesAwsPoliciesYml,
	"presets-files/cis-foundations/playbook.yml": presetsFilesCisFoundationsPlaybookYml,
	"presets-files/cis-foundations/policies.yml": presetsFilesCisFoundationsPoliciesYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"presets-files": &bintree{nil, map[string]*bintree{
		"aws": &bintree{nil, map[string]*bintree{
			"playbook.yml": &bintree{presetsFilesAwsPlaybookYml, map[string]*bintree{}},
			"policies.yml": &bintree{presetsFilesAwsPoliciesYml, map[string]*bintree{}},
		}},
		"cis-foundations": &bintree{nil, map[string]*bintree{
			"playbook.yml": &bintree{presetsFilesCisFoundationsPlaybookYml, map[string]*bintree{}},
			"policies.yml": &bintree{presetsFilesCisFoundationsPoliciesYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

